{"version":3,"sources":["../src/geohash.js"],"names":[],"mappings":"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","file":"geohash.js","sourcesContent":["/**\n * Copyright (c) 2011, Sun Ning.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use, copy,\n * modify, merge, publish, distribute, sublicense, and/or sell copies\n * of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\nvar BASE32_CODES = \"0123456789bcdefghjkmnpqrstuvwxyz\";\nvar BASE32_CODES_DICT = {};\nfor (var i = 0; i < BASE32_CODES.length; i++) {\n  BASE32_CODES_DICT[BASE32_CODES.charAt(i)] = i;\n}\n\nvar ENCODE_AUTO = 'auto';\n/**\n * Significant Figure Hash Length\n *\n * This is a quick and dirty lookup to figure out how long our hash\n * should be in order to guarantee a certain amount of trailing\n * significant figures. This was calculated by determining the error:\n * 45/2^(n-1) where n is the number of bits for a latitude or\n * longitude. Key is # of desired sig figs, value is minimum length of\n * the geohash.\n * @type Array\n */\n//     Desired sig figs:  0  1  2  3  4   5   6   7   8   9  10\nvar SIGFIG_HASH_LENGTH = [0, 5, 7, 8, 11, 12, 13, 15, 16, 17, 18];\n/**\n * Encode\n *\n * Create a Geohash out of a latitude and longitude that is\n * `numberOfChars` long.\n *\n * @param {Number|String} latitude\n * @param {Number|String} longitude\n * @param {Number} numberOfChars\n * @returns {String}\n */\nvar encode = function (latitude, longitude, numberOfChars) {\n  if (numberOfChars === ENCODE_AUTO) {\n    if (typeof(latitude) === 'number' || typeof(longitude) === 'number') {\n      throw new Error('string notation required for auto precision.');\n    }\n    var decSigFigsLat = latitude.split('.')[1].length;\n    var decSigFigsLong = longitude.split('.')[1].length;\n    var numberOfSigFigs = Math.max(decSigFigsLat, decSigFigsLong);\n    numberOfChars = SIGFIG_HASH_LENGTH[numberOfSigFigs];\n  } else if (numberOfChars === undefined) {\n    numberOfChars = 9;\n  }\n\n  var chars = [],\n  bits = 0,\n  bitsTotal = 0,\n  hash_value = 0,\n  maxLat = 90,\n  minLat = -90,\n  maxLon = 180,\n  minLon = -180,\n  mid;\n  while (chars.length < numberOfChars) {\n    if (bitsTotal % 2 === 0) {\n      mid = (maxLon + minLon) / 2;\n      if (longitude > mid) {\n        hash_value = (hash_value << 1) + 1;\n        minLon = mid;\n      } else {\n        hash_value = (hash_value << 1) + 0;\n        maxLon = mid;\n      }\n    } else {\n      mid = (maxLat + minLat) / 2;\n      if (latitude > mid) {\n        hash_value = (hash_value << 1) + 1;\n        minLat = mid;\n      } else {\n        hash_value = (hash_value << 1) + 0;\n        maxLat = mid;\n      }\n    }\n\n    bits++;\n    bitsTotal++;\n    if (bits === 5) {\n      var code = BASE32_CODES[hash_value];\n      chars.push(code);\n      bits = 0;\n      hash_value = 0;\n    }\n  }\n  return chars.join('');\n};\n\n/**\n * Encode Integer\n *\n * Create a Geohash out of a latitude and longitude that is of 'bitDepth'.\n *\n * @param {Number} latitude\n * @param {Number} longitude\n * @param {Number} bitDepth\n * @returns {Number}\n */\nvar encode_int = function (latitude, longitude, bitDepth) {\n\n  bitDepth = bitDepth || 52;\n\n  var bitsTotal = 0,\n  maxLat = 90,\n  minLat = -90,\n  maxLon = 180,\n  minLon = -180,\n  mid,\n  combinedBits = 0;\n\n  while (bitsTotal < bitDepth) {\n    combinedBits *= 2;\n    if (bitsTotal % 2 === 0) {\n      mid = (maxLon + minLon) / 2;\n      if (longitude > mid) {\n        combinedBits += 1;\n        minLon = mid;\n      } else {\n        maxLon = mid;\n      }\n    } else {\n      mid = (maxLat + minLat) / 2;\n      if (latitude > mid) {\n        combinedBits += 1;\n        minLat = mid;\n      } else {\n        maxLat = mid;\n      }\n    }\n    bitsTotal++;\n  }\n  return combinedBits;\n};\n\n/**\n * Decode Bounding Box\n *\n * Decode hashString into a bound box matches it. Data returned in a four-element array: [minlat, minlon, maxlat, maxlon]\n * @param {String} hash_string\n * @returns {Array}\n */\nvar decode_bbox = function (hash_string) {\n  var isLon = true,\n  maxLat = 90,\n  minLat = -90,\n  maxLon = 180,\n  minLon = -180,\n  mid;\n\n  var hashValue = 0;\n  for (var i = 0, l = hash_string.length; i < l; i++) {\n    var code = hash_string[i].toLowerCase();\n    hashValue = BASE32_CODES_DICT[code];\n\n    for (var bits = 4; bits >= 0; bits--) {\n      var bit = (hashValue >> bits) & 1;\n      if (isLon) {\n        mid = (maxLon + minLon) / 2;\n        if (bit === 1) {\n          minLon = mid;\n        } else {\n          maxLon = mid;\n        }\n      } else {\n        mid = (maxLat + minLat) / 2;\n        if (bit === 1) {\n          minLat = mid;\n        } else {\n          maxLat = mid;\n        }\n      }\n      isLon = !isLon;\n    }\n  }\n  return [minLat, minLon, maxLat, maxLon];\n};\n\n/**\n * Decode Bounding Box Integer\n *\n * Decode hash number into a bound box matches it. Data returned in a four-element array: [minlat, minlon, maxlat, maxlon]\n * @param {Number} hashInt\n * @param {Number} bitDepth\n * @returns {Array}\n */\nvar decode_bbox_int = function (hashInt, bitDepth) {\n\n  bitDepth = bitDepth || 52;\n\n  var maxLat = 90,\n  minLat = -90,\n  maxLon = 180,\n  minLon = -180;\n\n  var latBit = 0, lonBit = 0;\n  var step = bitDepth / 2;\n\n  for (var i = 0; i < step; i++) {\n\n    lonBit = get_bit(hashInt, ((step - i) * 2) - 1);\n    latBit = get_bit(hashInt, ((step - i) * 2) - 2);\n\n    if (latBit === 0) {\n      maxLat = (maxLat + minLat) / 2;\n    }\n    else {\n      minLat = (maxLat + minLat) / 2;\n    }\n\n    if (lonBit === 0) {\n      maxLon = (maxLon + minLon) / 2;\n    }\n    else {\n      minLon = (maxLon + minLon) / 2;\n    }\n  }\n  return [minLat, minLon, maxLat, maxLon];\n};\n\nfunction get_bit(bits, position) {\n  return (bits / Math.pow(2, position)) & 0x01;\n}\n\n/**\n * Decode\n *\n * Decode a hash string into pair of latitude and longitude. A javascript object is returned with keys `latitude`,\n * `longitude` and `error`.\n * @param {String} hashString\n * @returns {Object}\n */\nvar decode = function (hashString) {\n  var bbox = decode_bbox(hashString);\n  var lat = (bbox[0] + bbox[2]) / 2;\n  var lon = (bbox[1] + bbox[3]) / 2;\n  var latErr = bbox[2] - lat;\n  var lonErr = bbox[3] - lon;\n  return {latitude: lat, longitude: lon,\n          error: {latitude: latErr, longitude: lonErr}};\n};\n\n/**\n * Decode Integer\n *\n * Decode a hash number into pair of latitude and longitude. A javascript object is returned with keys `latitude`,\n * `longitude` and `error`.\n * @param {Number} hash_int\n * @param {Number} bitDepth\n * @returns {Object}\n */\nvar decode_int = function (hash_int, bitDepth) {\n  var bbox = decode_bbox_int(hash_int, bitDepth);\n  var lat = (bbox[0] + bbox[2]) / 2;\n  var lon = (bbox[1] + bbox[3]) / 2;\n  var latErr = bbox[2] - lat;\n  var lonErr = bbox[3] - lon;\n  return {latitude: lat, longitude: lon,\n          error: {latitude: latErr, longitude: lonErr}};\n};\n\n/**\n * Neighbor\n *\n * Find neighbor of a geohash string in certain direction. Direction is a two-element array, i.e. [1,0] means north, [-1,-1] means southwest.\n * direction [lat, lon], i.e.\n * [1,0] - north\n * [1,1] - northeast\n * ...\n * @param {String} hashString\n * @param {Array} Direction as a 2D normalized vector.\n * @returns {String}\n */\nvar neighbor = function (hashString, direction) {\n  var lonLat = decode(hashString);\n  var neighborLat = lonLat.latitude\n    + direction[0] * lonLat.error.latitude * 2;\n  var neighborLon = lonLat.longitude\n    + direction[1] * lonLat.error.longitude * 2;\n  return encode(neighborLat, neighborLon, hashString.length);\n};\n\n/**\n * Neighbor Integer\n *\n * Find neighbor of a geohash integer in certain direction. Direction is a two-element array, i.e. [1,0] means north, [-1,-1] means southwest.\n * direction [lat, lon], i.e.\n * [1,0] - north\n * [1,1] - northeast\n * ...\n * @param {String} hash_string\n * @returns {Array}\n*/\nvar neighbor_int = function(hash_int, direction, bitDepth) {\n    bitDepth = bitDepth || 52;\n    var lonlat = decode_int(hash_int, bitDepth);\n    var neighbor_lat = lonlat.latitude + direction[0] * lonlat.error.latitude * 2;\n    var neighbor_lon = lonlat.longitude + direction[1] * lonlat.error.longitude * 2;\n    return encode_int(neighbor_lat, neighbor_lon, bitDepth);\n};\n\n/**\n * Neighbors\n *\n * Returns all neighbors' hashstrings clockwise from north around to northwest\n * 7 0 1\n * 6 x 2\n * 5 4 3\n * @param {String} hash_string\n * @returns {encoded neighborHashList|Array}\n */\nvar neighbors = function(hash_string){\n\n    var hashstringLength = hash_string.length;\n\n    var lonlat = decode(hash_string);\n    var lat = lonlat.latitude;\n    var lon = lonlat.longitude;\n    var latErr = lonlat.error.latitude * 2;\n    var lonErr = lonlat.error.longitude * 2;\n\n    var neighbor_lat,\n        neighbor_lon;\n\n    var neighborHashList = [\n                            encodeNeighbor(1,0),\n                            encodeNeighbor(1,1),\n                            encodeNeighbor(0,1),\n                            encodeNeighbor(-1,1),\n                            encodeNeighbor(-1,0),\n                            encodeNeighbor(-1,-1),\n                            encodeNeighbor(0,-1),\n                            encodeNeighbor(1,-1)\n                            ];\n\n    function encodeNeighbor(neighborLatDir, neighborLonDir){\n        neighbor_lat = lat + neighborLatDir * latErr;\n        neighbor_lon = lon + neighborLonDir * lonErr;\n        return encode(neighbor_lat, neighbor_lon, hashstringLength);\n    }\n\n    return neighborHashList;\n};\n\n/**\n * Neighbors Integer\n *\n * Returns all neighbors' hash integers clockwise from north around to northwest\n * 7 0 1\n * 6 x 2\n * 5 4 3\n * @param {Number} hash_int\n * @param {Number} bitDepth\n * @returns {encode_int'd neighborHashIntList|Array}\n */\nvar neighbors_int = function(hash_int, bitDepth){\n\n    bitDepth = bitDepth || 52;\n\n    var lonlat = decode_int(hash_int, bitDepth);\n    var lat = lonlat.latitude;\n    var lon = lonlat.longitude;\n    var latErr = lonlat.error.latitude * 2;\n    var lonErr = lonlat.error.longitude * 2;\n\n    var neighbor_lat,\n        neighbor_lon;\n\n    var neighborHashIntList = [\n                            encodeNeighbor_int(1,0),\n                            encodeNeighbor_int(1,1),\n                            encodeNeighbor_int(0,1),\n                            encodeNeighbor_int(-1,1),\n                            encodeNeighbor_int(-1,0),\n                            encodeNeighbor_int(-1,-1),\n                            encodeNeighbor_int(0,-1),\n                            encodeNeighbor_int(1,-1)\n                            ];\n\n    function encodeNeighbor_int(neighborLatDir, neighborLonDir){\n        neighbor_lat = lat + neighborLatDir * latErr;\n        neighbor_lon = lon + neighborLonDir * lonErr;\n        return encode_int(neighbor_lat, neighbor_lon, bitDepth);\n    }\n\n    return neighborHashIntList;\n};\n\n\n/**\n * Bounding Boxes\n *\n * Return all the hashString between minLat, minLon, maxLat, maxLon in numberOfChars\n * @param {Number} minLat\n * @param {Number} minLon\n * @param {Number} maxLat\n * @param {Number} maxLon\n * @param {Number} numberOfChars\n * @returns {bboxes.hashList|Array}\n */\nvar bboxes = function (minLat, minLon, maxLat, maxLon, numberOfChars) {\n  numberOfChars = numberOfChars || 9;\n\n  var hashSouthWest = encode(minLat, minLon, numberOfChars);\n  var hashNorthEast = encode(maxLat, maxLon, numberOfChars);\n\n  var latLon = decode(hashSouthWest);\n\n  var perLat = latLon.error.latitude * 2;\n  var perLon = latLon.error.longitude * 2;\n\n  var boxSouthWest = decode_bbox(hashSouthWest);\n  var boxNorthEast = decode_bbox(hashNorthEast);\n\n  var latStep = Math.round((boxNorthEast[0] - boxSouthWest[0]) / perLat);\n  var lonStep = Math.round((boxNorthEast[1] - boxSouthWest[1]) / perLon);\n\n  var hashList = [];\n\n  for (var lat = 0; lat <= latStep; lat++) {\n    for (var lon = 0; lon <= lonStep; lon++) {\n      hashList.push(neighbor(hashSouthWest, [lat, lon]));\n    }\n  }\n\n  return hashList;\n};\n\n/**\n * Bounding Boxes Integer\n *\n * Return all the hash integers between minLat, minLon, maxLat, maxLon in bitDepth\n * @param {Number} minLat\n * @param {Number} minLon\n * @param {Number} maxLat\n * @param {Number} maxLon\n * @param {Number} bitDepth\n * @returns {bboxes_int.hashList|Array}\n */\nvar bboxes_int = function(minLat, minLon, maxLat, maxLon, bitDepth){\n    bitDepth = bitDepth || 52;\n\n    var hashSouthWest = encode_int(minLat, minLon, bitDepth);\n    var hashNorthEast = encode_int(maxLat, maxLon, bitDepth);\n\n    var latlon = decode_int(hashSouthWest, bitDepth);\n\n    var perLat = latlon.error.latitude * 2;\n    var perLon = latlon.error.longitude * 2;\n\n    var boxSouthWest = decode_bbox_int(hashSouthWest, bitDepth);\n    var boxNorthEast = decode_bbox_int(hashNorthEast, bitDepth);\n\n    var latStep = Math.round((boxNorthEast[0] - boxSouthWest[0])/perLat);\n    var lonStep = Math.round((boxNorthEast[1] - boxSouthWest[1])/perLon);\n\n    var hashList = [];\n\n    for(var lat = 0; lat <= latStep; lat++){\n        for(var lon = 0; lon <= lonStep; lon++){\n            hashList.push(neighbor_int(hashSouthWest,[lat, lon], bitDepth));\n        }\n    }\n\n    return hashList;\n};\n\nexport default {\n  'ENCODE_AUTO': ENCODE_AUTO,\n  'encode': encode,\n  'encode_uint64': encode_int, // keeping for backwards compatibility, will deprecate\n  'encode_int': encode_int,\n  'decode': decode,\n  'decode_int': decode_int,\n  'decode_uint64': decode_int, // keeping for backwards compatibility, will deprecate\n  'decode_bbox': decode_bbox,\n  'decode_bbox_uint64': decode_bbox_int, // keeping for backwards compatibility, will deprecate\n  'decode_bbox_int': decode_bbox_int,\n  'neighbor': neighbor,\n  'neighbor_int': neighbor_int,\n  'neighbors': neighbors,\n  'neighbors_int': neighbors_int,\n  'bboxes': bboxes,\n  'bboxes_int': bboxes_int\n};\n\n"]}