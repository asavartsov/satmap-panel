{"version":3,"sources":["../src/geohash.js"],"names":["get_bit","bits","position","Math","pow","BASE32_CODES","BASE32_CODES_DICT","i","length","charAt","ENCODE_AUTO","SIGFIG_HASH_LENGTH","encode","latitude","longitude","numberOfChars","Error","decSigFigsLat","split","decSigFigsLong","numberOfSigFigs","max","undefined","chars","bitsTotal","hash_value","maxLat","minLat","maxLon","minLon","mid","code","push","join","encode_int","bitDepth","combinedBits","decode_bbox","hash_string","isLon","hashValue","l","toLowerCase","bit","decode_bbox_int","hashInt","latBit","lonBit","step","decode","hashString","bbox","lat","lon","latErr","lonErr","error","decode_int","hash_int","neighbor","direction","lonLat","neighborLat","neighborLon","neighbor_int","lonlat","neighbor_lat","neighbor_lon","neighbors","hashstringLength","neighborHashList","encodeNeighbor","neighborLatDir","neighborLonDir","neighbors_int","neighborHashIntList","encodeNeighbor_int","bboxes","hashSouthWest","hashNorthEast","latLon","perLat","perLon","boxSouthWest","boxNorthEast","latStep","round","lonStep","hashList","bboxes_int","latlon"],"mappings":"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","file":"geohash.js","sourcesContent":["/**\r\n * Copyright (c) 2011, Sun Ning.\r\n *\r\n * Permission is hereby granted, free of charge, to any person\r\n * obtaining a copy of this software and associated documentation\r\n * files (the \"Software\"), to deal in the Software without\r\n * restriction, including without limitation the rights to use, copy,\r\n * modify, merge, publish, distribute, sublicense, and/or sell copies\r\n * of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\r\n * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\r\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\n\r\nvar BASE32_CODES = \"0123456789bcdefghjkmnpqrstuvwxyz\";\r\nvar BASE32_CODES_DICT = {};\r\nfor (var i = 0; i < BASE32_CODES.length; i++) {\r\n  BASE32_CODES_DICT[BASE32_CODES.charAt(i)] = i;\r\n}\r\n\r\nvar ENCODE_AUTO = 'auto';\r\n/**\r\n * Significant Figure Hash Length\r\n *\r\n * This is a quick and dirty lookup to figure out how long our hash\r\n * should be in order to guarantee a certain amount of trailing\r\n * significant figures. This was calculated by determining the error:\r\n * 45/2^(n-1) where n is the number of bits for a latitude or\r\n * longitude. Key is # of desired sig figs, value is minimum length of\r\n * the geohash.\r\n * @type Array\r\n */\r\n//     Desired sig figs:  0  1  2  3  4   5   6   7   8   9  10\r\nvar SIGFIG_HASH_LENGTH = [0, 5, 7, 8, 11, 12, 13, 15, 16, 17, 18];\r\n/**\r\n * Encode\r\n *\r\n * Create a Geohash out of a latitude and longitude that is\r\n * `numberOfChars` long.\r\n *\r\n * @param {Number|String} latitude\r\n * @param {Number|String} longitude\r\n * @param {Number} numberOfChars\r\n * @returns {String}\r\n */\r\nvar encode = function (latitude, longitude, numberOfChars) {\r\n  if (numberOfChars === ENCODE_AUTO) {\r\n    if (typeof(latitude) === 'number' || typeof(longitude) === 'number') {\r\n      throw new Error('string notation required for auto precision.');\r\n    }\r\n    var decSigFigsLat = latitude.split('.')[1].length;\r\n    var decSigFigsLong = longitude.split('.')[1].length;\r\n    var numberOfSigFigs = Math.max(decSigFigsLat, decSigFigsLong);\r\n    numberOfChars = SIGFIG_HASH_LENGTH[numberOfSigFigs];\r\n  } else if (numberOfChars === undefined) {\r\n    numberOfChars = 9;\r\n  }\r\n\r\n  var chars = [],\r\n  bits = 0,\r\n  bitsTotal = 0,\r\n  hash_value = 0,\r\n  maxLat = 90,\r\n  minLat = -90,\r\n  maxLon = 180,\r\n  minLon = -180,\r\n  mid;\r\n  while (chars.length < numberOfChars) {\r\n    if (bitsTotal % 2 === 0) {\r\n      mid = (maxLon + minLon) / 2;\r\n      if (longitude > mid) {\r\n        hash_value = (hash_value << 1) + 1;\r\n        minLon = mid;\r\n      } else {\r\n        hash_value = (hash_value << 1) + 0;\r\n        maxLon = mid;\r\n      }\r\n    } else {\r\n      mid = (maxLat + minLat) / 2;\r\n      if (latitude > mid) {\r\n        hash_value = (hash_value << 1) + 1;\r\n        minLat = mid;\r\n      } else {\r\n        hash_value = (hash_value << 1) + 0;\r\n        maxLat = mid;\r\n      }\r\n    }\r\n\r\n    bits++;\r\n    bitsTotal++;\r\n    if (bits === 5) {\r\n      var code = BASE32_CODES[hash_value];\r\n      chars.push(code);\r\n      bits = 0;\r\n      hash_value = 0;\r\n    }\r\n  }\r\n  return chars.join('');\r\n};\r\n\r\n/**\r\n * Encode Integer\r\n *\r\n * Create a Geohash out of a latitude and longitude that is of 'bitDepth'.\r\n *\r\n * @param {Number} latitude\r\n * @param {Number} longitude\r\n * @param {Number} bitDepth\r\n * @returns {Number}\r\n */\r\nvar encode_int = function (latitude, longitude, bitDepth) {\r\n\r\n  bitDepth = bitDepth || 52;\r\n\r\n  var bitsTotal = 0,\r\n  maxLat = 90,\r\n  minLat = -90,\r\n  maxLon = 180,\r\n  minLon = -180,\r\n  mid,\r\n  combinedBits = 0;\r\n\r\n  while (bitsTotal < bitDepth) {\r\n    combinedBits *= 2;\r\n    if (bitsTotal % 2 === 0) {\r\n      mid = (maxLon + minLon) / 2;\r\n      if (longitude > mid) {\r\n        combinedBits += 1;\r\n        minLon = mid;\r\n      } else {\r\n        maxLon = mid;\r\n      }\r\n    } else {\r\n      mid = (maxLat + minLat) / 2;\r\n      if (latitude > mid) {\r\n        combinedBits += 1;\r\n        minLat = mid;\r\n      } else {\r\n        maxLat = mid;\r\n      }\r\n    }\r\n    bitsTotal++;\r\n  }\r\n  return combinedBits;\r\n};\r\n\r\n/**\r\n * Decode Bounding Box\r\n *\r\n * Decode hashString into a bound box matches it. Data returned in a four-element array: [minlat, minlon, maxlat, maxlon]\r\n * @param {String} hash_string\r\n * @returns {Array}\r\n */\r\nvar decode_bbox = function (hash_string) {\r\n  var isLon = true,\r\n  maxLat = 90,\r\n  minLat = -90,\r\n  maxLon = 180,\r\n  minLon = -180,\r\n  mid;\r\n\r\n  var hashValue = 0;\r\n  for (var i = 0, l = hash_string.length; i < l; i++) {\r\n    var code = hash_string[i].toLowerCase();\r\n    hashValue = BASE32_CODES_DICT[code];\r\n\r\n    for (var bits = 4; bits >= 0; bits--) {\r\n      var bit = (hashValue >> bits) & 1;\r\n      if (isLon) {\r\n        mid = (maxLon + minLon) / 2;\r\n        if (bit === 1) {\r\n          minLon = mid;\r\n        } else {\r\n          maxLon = mid;\r\n        }\r\n      } else {\r\n        mid = (maxLat + minLat) / 2;\r\n        if (bit === 1) {\r\n          minLat = mid;\r\n        } else {\r\n          maxLat = mid;\r\n        }\r\n      }\r\n      isLon = !isLon;\r\n    }\r\n  }\r\n  return [minLat, minLon, maxLat, maxLon];\r\n};\r\n\r\n/**\r\n * Decode Bounding Box Integer\r\n *\r\n * Decode hash number into a bound box matches it. Data returned in a four-element array: [minlat, minlon, maxlat, maxlon]\r\n * @param {Number} hashInt\r\n * @param {Number} bitDepth\r\n * @returns {Array}\r\n */\r\nvar decode_bbox_int = function (hashInt, bitDepth) {\r\n\r\n  bitDepth = bitDepth || 52;\r\n\r\n  var maxLat = 90,\r\n  minLat = -90,\r\n  maxLon = 180,\r\n  minLon = -180;\r\n\r\n  var latBit = 0, lonBit = 0;\r\n  var step = bitDepth / 2;\r\n\r\n  for (var i = 0; i < step; i++) {\r\n\r\n    lonBit = get_bit(hashInt, ((step - i) * 2) - 1);\r\n    latBit = get_bit(hashInt, ((step - i) * 2) - 2);\r\n\r\n    if (latBit === 0) {\r\n      maxLat = (maxLat + minLat) / 2;\r\n    }\r\n    else {\r\n      minLat = (maxLat + minLat) / 2;\r\n    }\r\n\r\n    if (lonBit === 0) {\r\n      maxLon = (maxLon + minLon) / 2;\r\n    }\r\n    else {\r\n      minLon = (maxLon + minLon) / 2;\r\n    }\r\n  }\r\n  return [minLat, minLon, maxLat, maxLon];\r\n};\r\n\r\nfunction get_bit(bits, position) {\r\n  return (bits / Math.pow(2, position)) & 0x01;\r\n}\r\n\r\n/**\r\n * Decode\r\n *\r\n * Decode a hash string into pair of latitude and longitude. A javascript object is returned with keys `latitude`,\r\n * `longitude` and `error`.\r\n * @param {String} hashString\r\n * @returns {Object}\r\n */\r\nvar decode = function (hashString) {\r\n  var bbox = decode_bbox(hashString);\r\n  var lat = (bbox[0] + bbox[2]) / 2;\r\n  var lon = (bbox[1] + bbox[3]) / 2;\r\n  var latErr = bbox[2] - lat;\r\n  var lonErr = bbox[3] - lon;\r\n  return {latitude: lat, longitude: lon,\r\n          error: {latitude: latErr, longitude: lonErr}};\r\n};\r\n\r\n/**\r\n * Decode Integer\r\n *\r\n * Decode a hash number into pair of latitude and longitude. A javascript object is returned with keys `latitude`,\r\n * `longitude` and `error`.\r\n * @param {Number} hash_int\r\n * @param {Number} bitDepth\r\n * @returns {Object}\r\n */\r\nvar decode_int = function (hash_int, bitDepth) {\r\n  var bbox = decode_bbox_int(hash_int, bitDepth);\r\n  var lat = (bbox[0] + bbox[2]) / 2;\r\n  var lon = (bbox[1] + bbox[3]) / 2;\r\n  var latErr = bbox[2] - lat;\r\n  var lonErr = bbox[3] - lon;\r\n  return {latitude: lat, longitude: lon,\r\n          error: {latitude: latErr, longitude: lonErr}};\r\n};\r\n\r\n/**\r\n * Neighbor\r\n *\r\n * Find neighbor of a geohash string in certain direction. Direction is a two-element array, i.e. [1,0] means north, [-1,-1] means southwest.\r\n * direction [lat, lon], i.e.\r\n * [1,0] - north\r\n * [1,1] - northeast\r\n * ...\r\n * @param {String} hashString\r\n * @param {Array} Direction as a 2D normalized vector.\r\n * @returns {String}\r\n */\r\nvar neighbor = function (hashString, direction) {\r\n  var lonLat = decode(hashString);\r\n  var neighborLat = lonLat.latitude\r\n    + direction[0] * lonLat.error.latitude * 2;\r\n  var neighborLon = lonLat.longitude\r\n    + direction[1] * lonLat.error.longitude * 2;\r\n  return encode(neighborLat, neighborLon, hashString.length);\r\n};\r\n\r\n/**\r\n * Neighbor Integer\r\n *\r\n * Find neighbor of a geohash integer in certain direction. Direction is a two-element array, i.e. [1,0] means north, [-1,-1] means southwest.\r\n * direction [lat, lon], i.e.\r\n * [1,0] - north\r\n * [1,1] - northeast\r\n * ...\r\n * @param {String} hash_string\r\n * @returns {Array}\r\n*/\r\nvar neighbor_int = function(hash_int, direction, bitDepth) {\r\n    bitDepth = bitDepth || 52;\r\n    var lonlat = decode_int(hash_int, bitDepth);\r\n    var neighbor_lat = lonlat.latitude + direction[0] * lonlat.error.latitude * 2;\r\n    var neighbor_lon = lonlat.longitude + direction[1] * lonlat.error.longitude * 2;\r\n    return encode_int(neighbor_lat, neighbor_lon, bitDepth);\r\n};\r\n\r\n/**\r\n * Neighbors\r\n *\r\n * Returns all neighbors' hashstrings clockwise from north around to northwest\r\n * 7 0 1\r\n * 6 x 2\r\n * 5 4 3\r\n * @param {String} hash_string\r\n * @returns {encoded neighborHashList|Array}\r\n */\r\nvar neighbors = function(hash_string){\r\n\r\n    var hashstringLength = hash_string.length;\r\n\r\n    var lonlat = decode(hash_string);\r\n    var lat = lonlat.latitude;\r\n    var lon = lonlat.longitude;\r\n    var latErr = lonlat.error.latitude * 2;\r\n    var lonErr = lonlat.error.longitude * 2;\r\n\r\n    var neighbor_lat,\r\n        neighbor_lon;\r\n\r\n    var neighborHashList = [\r\n                            encodeNeighbor(1,0),\r\n                            encodeNeighbor(1,1),\r\n                            encodeNeighbor(0,1),\r\n                            encodeNeighbor(-1,1),\r\n                            encodeNeighbor(-1,0),\r\n                            encodeNeighbor(-1,-1),\r\n                            encodeNeighbor(0,-1),\r\n                            encodeNeighbor(1,-1)\r\n                            ];\r\n\r\n    function encodeNeighbor(neighborLatDir, neighborLonDir){\r\n        neighbor_lat = lat + neighborLatDir * latErr;\r\n        neighbor_lon = lon + neighborLonDir * lonErr;\r\n        return encode(neighbor_lat, neighbor_lon, hashstringLength);\r\n    }\r\n\r\n    return neighborHashList;\r\n};\r\n\r\n/**\r\n * Neighbors Integer\r\n *\r\n * Returns all neighbors' hash integers clockwise from north around to northwest\r\n * 7 0 1\r\n * 6 x 2\r\n * 5 4 3\r\n * @param {Number} hash_int\r\n * @param {Number} bitDepth\r\n * @returns {encode_int'd neighborHashIntList|Array}\r\n */\r\nvar neighbors_int = function(hash_int, bitDepth){\r\n\r\n    bitDepth = bitDepth || 52;\r\n\r\n    var lonlat = decode_int(hash_int, bitDepth);\r\n    var lat = lonlat.latitude;\r\n    var lon = lonlat.longitude;\r\n    var latErr = lonlat.error.latitude * 2;\r\n    var lonErr = lonlat.error.longitude * 2;\r\n\r\n    var neighbor_lat,\r\n        neighbor_lon;\r\n\r\n    var neighborHashIntList = [\r\n                            encodeNeighbor_int(1,0),\r\n                            encodeNeighbor_int(1,1),\r\n                            encodeNeighbor_int(0,1),\r\n                            encodeNeighbor_int(-1,1),\r\n                            encodeNeighbor_int(-1,0),\r\n                            encodeNeighbor_int(-1,-1),\r\n                            encodeNeighbor_int(0,-1),\r\n                            encodeNeighbor_int(1,-1)\r\n                            ];\r\n\r\n    function encodeNeighbor_int(neighborLatDir, neighborLonDir){\r\n        neighbor_lat = lat + neighborLatDir * latErr;\r\n        neighbor_lon = lon + neighborLonDir * lonErr;\r\n        return encode_int(neighbor_lat, neighbor_lon, bitDepth);\r\n    }\r\n\r\n    return neighborHashIntList;\r\n};\r\n\r\n\r\n/**\r\n * Bounding Boxes\r\n *\r\n * Return all the hashString between minLat, minLon, maxLat, maxLon in numberOfChars\r\n * @param {Number} minLat\r\n * @param {Number} minLon\r\n * @param {Number} maxLat\r\n * @param {Number} maxLon\r\n * @param {Number} numberOfChars\r\n * @returns {bboxes.hashList|Array}\r\n */\r\nvar bboxes = function (minLat, minLon, maxLat, maxLon, numberOfChars) {\r\n  numberOfChars = numberOfChars || 9;\r\n\r\n  var hashSouthWest = encode(minLat, minLon, numberOfChars);\r\n  var hashNorthEast = encode(maxLat, maxLon, numberOfChars);\r\n\r\n  var latLon = decode(hashSouthWest);\r\n\r\n  var perLat = latLon.error.latitude * 2;\r\n  var perLon = latLon.error.longitude * 2;\r\n\r\n  var boxSouthWest = decode_bbox(hashSouthWest);\r\n  var boxNorthEast = decode_bbox(hashNorthEast);\r\n\r\n  var latStep = Math.round((boxNorthEast[0] - boxSouthWest[0]) / perLat);\r\n  var lonStep = Math.round((boxNorthEast[1] - boxSouthWest[1]) / perLon);\r\n\r\n  var hashList = [];\r\n\r\n  for (var lat = 0; lat <= latStep; lat++) {\r\n    for (var lon = 0; lon <= lonStep; lon++) {\r\n      hashList.push(neighbor(hashSouthWest, [lat, lon]));\r\n    }\r\n  }\r\n\r\n  return hashList;\r\n};\r\n\r\n/**\r\n * Bounding Boxes Integer\r\n *\r\n * Return all the hash integers between minLat, minLon, maxLat, maxLon in bitDepth\r\n * @param {Number} minLat\r\n * @param {Number} minLon\r\n * @param {Number} maxLat\r\n * @param {Number} maxLon\r\n * @param {Number} bitDepth\r\n * @returns {bboxes_int.hashList|Array}\r\n */\r\nvar bboxes_int = function(minLat, minLon, maxLat, maxLon, bitDepth){\r\n    bitDepth = bitDepth || 52;\r\n\r\n    var hashSouthWest = encode_int(minLat, minLon, bitDepth);\r\n    var hashNorthEast = encode_int(maxLat, maxLon, bitDepth);\r\n\r\n    var latlon = decode_int(hashSouthWest, bitDepth);\r\n\r\n    var perLat = latlon.error.latitude * 2;\r\n    var perLon = latlon.error.longitude * 2;\r\n\r\n    var boxSouthWest = decode_bbox_int(hashSouthWest, bitDepth);\r\n    var boxNorthEast = decode_bbox_int(hashNorthEast, bitDepth);\r\n\r\n    var latStep = Math.round((boxNorthEast[0] - boxSouthWest[0])/perLat);\r\n    var lonStep = Math.round((boxNorthEast[1] - boxSouthWest[1])/perLon);\r\n\r\n    var hashList = [];\r\n\r\n    for(var lat = 0; lat <= latStep; lat++){\r\n        for(var lon = 0; lon <= lonStep; lon++){\r\n            hashList.push(neighbor_int(hashSouthWest,[lat, lon], bitDepth));\r\n        }\r\n    }\r\n\r\n    return hashList;\r\n};\r\n\r\nexport default {\r\n  'ENCODE_AUTO': ENCODE_AUTO,\r\n  'encode': encode,\r\n  'encode_uint64': encode_int, // keeping for backwards compatibility, will deprecate\r\n  'encode_int': encode_int,\r\n  'decode': decode,\r\n  'decode_int': decode_int,\r\n  'decode_uint64': decode_int, // keeping for backwards compatibility, will deprecate\r\n  'decode_bbox': decode_bbox,\r\n  'decode_bbox_uint64': decode_bbox_int, // keeping for backwards compatibility, will deprecate\r\n  'decode_bbox_int': decode_bbox_int,\r\n  'neighbor': neighbor,\r\n  'neighbor_int': neighbor_int,\r\n  'neighbors': neighbors,\r\n  'neighbors_int': neighbors_int,\r\n  'bboxes': bboxes,\r\n  'bboxes_int': bboxes_int\r\n};\r\n\r\n"]}